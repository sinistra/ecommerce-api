package main

import (
	"context"
	"fmt"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/contrib/static"
	"github.com/gin-gonic/gin"
	"github.com/globalsign/mgo"
	"github.com/jmoiron/sqlx"
	"github.com/joho/godotenv"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/sinistra/ecommerce-api/auth"
	"github.com/sinistra/ecommerce-api/controllers"

	swaggerFiles "github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"

	_ "github.com/sinistra/ecommerce-api/docs" // docs is generated by Swag CLI, you have to import it.
)

var db *sqlx.DB
var mdb *mgo.Database
var port string
var host string

func init() {
	godotenv.Load()
	var ok bool
	port, ok = os.LookupEnv("HOST_PORT")

	if !ok {
		port = "8000"
	}

	host, ok = os.LookupEnv("HOST_URL")
	if !ok {
		host = "http://localhost"
	}
}

func main() {

	itemController := controllers.ItemController{}
	userController := controllers.UserController{}

	router := gin.New()
	router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {
		// custom format
		return fmt.Sprintf("%s |%s|[%s]|%s|%s|%d|%s|%s|%s\n",
			param.TimeStamp.Format(time.RFC3339),
			param.Method,
			param.ClientIP,
			param.Path,
			param.Request.Proto,
			param.StatusCode,
			param.Latency,
			param.Request.UserAgent(),
			param.ErrorMessage,
		)
	}))

	// Recovery middleware recovers from any panics and writes a 500 if there was one.
	router.Use(gin.Recovery())

	router.Use(cors.New(cors.Config{
		// AllowAllOrigins: true,
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE"},
		AllowHeaders:     []string{"Origin", "Accept", "Content-Type", "Content-Length", "Accept-Encoding", "X-CSRF-Token", "Authorization", "ResponseType"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	// Serve frontend static files
	router.Use(static.Serve("/", static.LocalFile("./public", true)))

	urlString := fmt.Sprintf(host + ":" + port + "/swagger/doc.json")
	url := ginSwagger.URL(urlString) // The url pointing to API definition
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	router.GET("/ping", func(c *gin.Context) {
		c.String(200, "pong "+fmt.Sprint(time.Now().Unix()))
	})

	router.POST("/login", userController.Login)
	router.GET("/checktoken", userController.CheckForToken)
	router.GET("/testauth", auth.JWTVerifyMiddleWare, userController.TestAuth)

	api := router.Group("/api", auth.JWTVerifyMiddleWare)

	api.GET("/users", userController.G)
	api.GET("/services/:id", serviceController.GetService)
	api.POST("/services", serviceController.AddService)
	api.PUT("/services", serviceController.UpdateService)
	api.DELETE("/services/:id", serviceController.RemoveService)

	api.GET("/carriages", carriageController.GetCarriages)
	api.GET("/carriages/:id", carriageController.GetCarriage)
	api.GET("/carriages/:id/connectwise", carriageController.PostToConnectWise)
	api.POST("/carriages", carriageController.AddCarriage)
	api.PUT("/carriages", carriageController.UpdateCarriage)
	api.DELETE("/carriages/:id", carriageController.RemoveCarriage)
	api.POST("/carriages/aapt/qualifyAddress", carriageController.QualifyAaptAddress)
	api.POST("/carriages/aapt/qualifyProduct", carriageController.QualifyAaptProduct)
	api.POST("/carriages/aapt/qualifyFastFibreProduct", carriageController.QualifyFastFibreProduct)

	api.GET("/products/ethernetaccess", productController.GetEthernetAccessTypes)
	api.GET("/products/ethernetqos", productController.GetEthernetQosTypes)
	api.GET("/products/eline", productController.GetElineTypes)
	api.POST("/products/providerproducts", productController.GetProviderProducts)
	api.POST("/products/access", productController.GetAccessClasses)
	api.POST("/products/available", productController.GetAvailableProducts)

	api.POST("/pricing/aapt/bandwidth", pricingController.GetBandwidthPrices)
	api.POST("/pricing/aapt/productPricing", pricingController.GetAaptProductPricing)
	api.POST("/pricing/aapt/intrastate", pricingController.GetAaptIntrastateCharges)
	api.POST("/pricing/aapt/charges", pricingController.GetAaptServiceCharges)

	// server execution runs in it's own thread
	// separate channel established to monitor for shutdown.
	fmt.Println("Server is running at port " + port)
	srv := &http.Server{
		Addr:    ":" + port,
		Handler: router,
	}

	go func() {
		// service connections
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("listen: %s\n", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server with
	// a timeout of 5 seconds.
	quit := make(chan os.Signal)
	// kill (no param) default send syscall.SIGTERM
	// kill -2 is syscall.SIGINT
	// kill -9 is syscall.SIGKILL but can't be caught, so don't need add it
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutdown Server ...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("Server shutdown error - I am going to crash it:", err)
	}
	// catching ctx.Done(). timeout of 5 seconds.
	select {
	case <-ctx.Done():
		log.Println("timeout of 5 seconds.")
	}
	log.Println("Server exiting")
}
